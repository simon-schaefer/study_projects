/*
internal_simpleMPC_solver_1 : A fast customized optimization solver.

Copyright (C) 2013-2019 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCES PRO v1.7.0 on Thursday, May 16, 2019 at 6:48:00 PM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif

#ifndef internal_simpleMPC_solver_1_H
#define internal_simpleMPC_solver_1_H

/* DATA TYPE ------------------------------------------------------------*/
typedef double internal_simpleMPC_solver_1_float;

typedef double internal_simpleMPC_solver_1interface_float;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_internal_simpleMPC_solver_1
#define MISRA_C_internal_simpleMPC_solver_1 (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_internal_simpleMPC_solver_1
#define RESTRICT_CODE_internal_simpleMPC_solver_1 (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_internal_simpleMPC_solver_1
#define SET_PRINTLEVEL_internal_simpleMPC_solver_1    (2)
#endif

/* timing */
#ifndef SET_TIMING_internal_simpleMPC_solver_1
#define SET_TIMING_internal_simpleMPC_solver_1    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_internal_simpleMPC_solver_1         (200)	

/* scaling factor of line search (affine direction) */
#define SET_LS_SCALE_AFF_internal_simpleMPC_solver_1  (internal_simpleMPC_solver_1_float)(0.9)      

/* scaling factor of line search (combined direction) */
#define SET_LS_SCALE_internal_simpleMPC_solver_1      (internal_simpleMPC_solver_1_float)(0.95)  

/* minimum required step size in each iteration */
#define SET_LS_MINSTEP_internal_simpleMPC_solver_1    (internal_simpleMPC_solver_1_float)(1E-08)

/* maximum step size (combined direction) */
#define SET_LS_MAXSTEP_internal_simpleMPC_solver_1    (internal_simpleMPC_solver_1_float)(0.995)

/* desired relative duality gap */
#define SET_ACC_RDGAP_internal_simpleMPC_solver_1     (internal_simpleMPC_solver_1_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_internal_simpleMPC_solver_1     (internal_simpleMPC_solver_1_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_internal_simpleMPC_solver_1   (internal_simpleMPC_solver_1_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_internal_simpleMPC_solver_1  (internal_simpleMPC_solver_1_float)(1E-06)


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_internal_simpleMPC_solver_1      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_internal_simpleMPC_solver_1 (0)

/* no progress in line search possible */
#define NOPROGRESS_internal_simpleMPC_solver_1   (-7)

/* fatal internal error - nans occurring */
#define NAN_internal_simpleMPC_solver_1  (-10)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_internal_simpleMPC_solver_1   (-11)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_internal_simpleMPC_solver_1  (-100)


/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct internal_simpleMPC_solver_1_params
{
    /* vector of size 58 */
    internal_simpleMPC_solver_1_float p_1[58];

    /* vector of size 168 */
    internal_simpleMPC_solver_1_float p_2[168];

} internal_simpleMPC_solver_1_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct internal_simpleMPC_solver_1_output
{
    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_1[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_2[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_3[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_4[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_5[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_6[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_7[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_8[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_9[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_10[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_11[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_12[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_13[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_14[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_15[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_16[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_17[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_18[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_19[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_20[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_21[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_22[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_23[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_24[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_25[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_26[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_27[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_28[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_29[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_30[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_31[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_32[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_33[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_34[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_35[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_36[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_37[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_38[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_39[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_40[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_41[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_42[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_43[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_44[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_45[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_46[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_47[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_48[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_49[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_50[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_51[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_52[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_53[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_54[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_55[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_56[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_57[1];

    /* vector of size 1 */
    internal_simpleMPC_solver_1_float o_58[1];

} internal_simpleMPC_solver_1_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct internal_simpleMPC_solver_1_info
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    internal_simpleMPC_solver_1_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    internal_simpleMPC_solver_1_float res_ineq;

    /* primal objective */
    internal_simpleMPC_solver_1_float pobj;	
	
    /* dual objective */
    internal_simpleMPC_solver_1_float dobj;	

    /* duality gap := pobj - dobj */
    internal_simpleMPC_solver_1_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    internal_simpleMPC_solver_1_float rdgap;		

    /* duality measure */
    internal_simpleMPC_solver_1_float mu;

	/* duality measure (after affine step) */
    internal_simpleMPC_solver_1_float mu_aff;
	
    /* centering parameter */
    internal_simpleMPC_solver_1_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    internal_simpleMPC_solver_1_float step_aff;
    
    /* step size (combined direction) */
    internal_simpleMPC_solver_1_float step_cc;    

	/* solvertime */
	internal_simpleMPC_solver_1_float solvetime;   

} internal_simpleMPC_solver_1_info;









/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* User License expires on: (UTC) Friday, August 2, 2019 9:00:00 PM (approx.) */
/* Solver License expires on: (UTC) Friday, August 2, 2019 9:00:00 PM (approx.) */
/* Solver Generation Request Id: d2114561-62e5-46e0-b778-1704f30d0fcb */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif
extern solver_int32_default internal_simpleMPC_solver_1_solve(internal_simpleMPC_solver_1_params *params, internal_simpleMPC_solver_1_output *output, internal_simpleMPC_solver_1_info *info, FILE *fs);

#ifdef __cplusplus
}
#endif

#endif